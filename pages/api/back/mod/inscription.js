import dbConnect from "@/pages/api/back/model/connectDB";
import tableArticle from "@/pages/api/back/mod/articleSchemaDB";
import ModelGarde from "@/pages/api/back/mod/gardeSchema";

export default async function handler(req, res) {
  try {
    console.log("‚úÖ Requ√™te re√ßue dans l'API");

    await dbConnect();
    console.log("......connexion avec succ√®s");

    if (req.method === "POST") {
      const { nom, prenom, role, specialite, email, password } = req.body;

      console.log("üì¶ Donn√©es re√ßues :", req.body);

      // V√©rification des champs obligatoires
      if (!nom || !prenom || !role || !email || !password || (role === "M√©decin" && !specialite)) {
        console.log("‚ö†Ô∏è Champs manquants !");
        return res.status(400).json({
          success: false,
          message: "Tous les champs requis ne sont pas fournis.",
        });
      }

      // V√©rifie si l'email existe d√©j√†
      const existing = await tableArticle.findOne({ email });
      if (existing) {
        console.log("‚ö†Ô∏è Email d√©j√† utilis√© :", email);
        return res.status(400).json({
          success: false,
          message: "Email d√©j√† utilis√©.",
        });
      }

      // Cr√©ation de l'utilisateur
      const newUser = await tableArticle.create({
        nom,
        prenom,
        role,
        specialite: role === "M√©decin" ? specialite : "",
        email,
        password,
      });

      console.log("‚úÖ Utilisateur cr√©√© :", newUser);

      // Si M√©decin, ajouter une garde automatiquement
      if (role === "M√©decin") {
        const gardes = await ModelGarde.find({ specialite }).sort({ date: -1 });
        const derniereDate = gardes.length > 0 ? gardes[0].date : new Date();
        const prochaineDate = new Date(derniereDate);
        prochaineDate.setDate(prochaineDate.getDate() + 1);

        await ModelGarde.create({
          nom,
          prenom,
          specialite,
          date: prochaineDate,
        });

        console.log("‚úÖ Garde ajout√©e pour le m√©decin :", prochaineDate);
      }

      return res.status(201).json({
        success: true,
        message: "Utilisateur inscrit avec succ√®s",
        user: newUser,
      });

    } else {
      // Si la m√©thode n'est pas POST
      return res.status(405).json({
        success: false,
        message: "M√©thode non autoris√©e",
      });
    }

  } catch (err) {
    console.error("‚ùå Erreur serveur :", err);

    // G√©rer le cas d'un email d√©j√† existant (erreur MongoDB de duplicata)
    if (err.code === 11000 && err.keyPattern?.email) {
      return res.status(400).json({
        success: false,
        message: "Email d√©j√† utilis√© (erreur de duplication).",
      });
    }

    return res.status(500).json({
      success: false,
      message: "Erreur interne du serveur",
      error: err.message,
    });
  }
}
